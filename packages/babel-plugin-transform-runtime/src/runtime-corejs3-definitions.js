export default () => {
  return {
    builtins: {
      Map: "map",
      Observable: "observable",
      Promise: "promise",
      Set: "set",
      Symbol: "symbol",
      URL: "url",
      URLSearchParams: "url-search-params",
      WeakMap: "weak-map",
      WeakSet: "weak-set",
      clearImmediate: "clear-immediate",
      compositeKey: "composite-key",
      compositeSymbol: "composite-symbol",
      globalThis: "global-this",
      parseFloat: "parse-float",
      parseInt: "parse-int",
      queueMicrotask: "queue-microtask",
      setImmediate: "set-immediate",
      setInterval: "set-interval",
      setTimeout: "set-timeout",
    },

    methods: {
      Array: {
        from: "array/from",
        isArray: "array/is-array",
        of: "array/of",
      },

      Date: {
        now: "date/now",
      },

      JSON: {
        stringify: "json/stringify",
      },

      Math: {
        DEG_PER_RAD: "math/deg-per-rad",
        RAD_PER_DEG: "math/rad-per-deg",
        acosh: "math/acosh",
        asinh: "math/asinh",
        atanh: "math/atanh",
        cbrt: "math/cbrt",
        clamp: "math/clamp",
        clz32: "math/clz32",
        cosh: "math/cosh",
        degrees: "math/degrees",
        expm1: "math/expm1",
        fround: "math/fround",
        fscale: "math/fscale",
        hypot: "math/hypot",
        iaddh: "math/iaddh",
        imul: "math/imul",
        imulh: "math/imulh",
        isubh: "math/isubh",
        log10: "math/log10",
        log1p: "math/log1p",
        log2: "math/log2",
        radians: "math/radians",
        scale: "math/scale",
        seededPRNG: "math/seeded-prng",
        sign: "math/sign",
        signbit: "math/signbit",
        sinh: "math/sinh",
        tanh: "math/tanh",
        trunc: "math/trunc",
        umulh: "math/umulh",
      },

      Number: {
        EPSILON: "number/epsilon",
        MAX_SAFE_INTEGER: "number/max-safe-integer",
        MIN_SAFE_INTEGER: "number/min-safe-integer",
        fromString: "number/from-string",
        isFinite: "number/is-finite",
        isInteger: "number/is-integer",
        isNaN: "number/is-nan",
        isSafeInteger: "number/is-safe-integer",
        parseFloat: "number/parse-float",
        parseInt: "number/parse-int",
      },

      Object: {
        assign: "object/assign",
        create: "object/create",
        defineProperties: "object/define-properties",
        defineProperty: "object/define-property",
        entries: "object/entries",
        freeze: "object/freeze",
        fromEntries: "object/from-entries",
        getOwnPropertyDescriptor: "object/get-own-property-descriptor",
        getOwnPropertyDescriptors: "object/get-own-property-descriptors",
        getOwnPropertyNames: "object/get-own-property-names",
        getOwnPropertySymbols: "object/get-own-property-symbols",
        getPrototypeOf: "object/get-prototype-of",
        isExtensible: "object/is-extensible",
        isFrozen: "object/is-frozen",
        isSealed: "object/is-sealed",
        is: "object/is",
        keys: "object/keys",
        preventExtensions: "object/prevent-extensions",
        seal: "object/seal",
        setPrototypeOf: "object/set-prototype-of",
        values: "object/values",
      },

      Reflect: {
        apply: "reflect/apply",
        construct: "reflect/construct",
        defineMetadata: "reflect/define-metadata",
        defineProperty: "reflect/define-property",
        deleteMetadata: "reflect/delete-metadata",
        deleteProperty: "reflect/delete-property",
        getMetadata: "reflect/get-metadata",
        getMetadataKeys: "reflect/get-metadata-keys",
        getOwnMetadata: "reflect/get-own-metadata",
        getOwnMetadataKeys: "reflect/get-own-metadata-keys",
        getOwnPropertyDescriptor: "reflect/get-own-property-descriptor",
        getPrototypeOf: "reflect/get-prototype-of",
        get: "reflect/get",
        has: "reflect/has",
        hasMetadata: "reflect/has-metadata",
        hasOwnMetadata: "reflect/has-own-metadata",
        isExtensible: "reflect/is-extensible",
        metadata: "reflect/metadata",
        ownKeys: "reflect/own-keys",
        preventExtensions: "reflect/prevent-extensions",
        set: "reflect/set",
        setPrototypeOf: "reflect/set-prototype-of",
      },

      String: {
        fromCodePoint: "string/from-code-point",
        raw: "string/raw",
      },

      Symbol: {
        asyncIterator: "symbol/async-iterator",
        dispose: "symbol/dispose",
        for: "symbol/for",
        hasInstance: "symbol/has-instance",
        isConcatSpreadable: "symbol/is-concat-spreadable",
        iterator: "symbol/iterator",
        keyFor: "symbol/key-for",
        match: "symbol/match",
        observable: "symbol/observable",
        patternMatch: "symbol/pattern-match",
        replace: "symbol/replace",
        search: "symbol/search",
        species: "symbol/species",
        split: "symbol/split",
        toPrimitive: "symbol/to-primitive",
        toStringTag: "symbol/to-string-tag",
        unscopables: "symbol/unscopables",
      },
    },
  };
};
